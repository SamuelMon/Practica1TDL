/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica.pkg1.tdl;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author monto
 */
public class GUI2 extends javax.swing.JFrame {

    public String[][] automataMatrizG2;
    private DefaultTableModel modelo;
    public ArrayList<String[]> automataFliasG2;
    
    /**
     * Creates new form GUI2
     */
    public GUI2(String[][] automataM,ArrayList<String[]> automataF) {
        initComponents();
        
        this.automataFliasG2=automataF;
        this.automataMatrizG2 = automataM;
        
        mostrarAutomata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAutomata = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        infoHilera = new javax.swing.JButton();
        hileraText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        transYvalid = new javax.swing.JTextArea();
        validar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Procesamiento de hileras");

        tablaAutomata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaAutomata);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Ingrese hilera a validar:");

        infoHilera.setText("?");
        infoHilera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoHileraActionPerformed(evt);
            }
        });

        transYvalid.setColumns(20);
        transYvalid.setRows(5);
        jScrollPane2.setViewportView(transYvalid);

        validar.setText("Validar");
        validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(201, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(199, 199, 199))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoHilera))
                            .addComponent(hileraText, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(validar)
                        .addGap(139, 139, 139))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(infoHilera))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hileraText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(validar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validarActionPerformed
        // TODO add your handling code here:
        reconocerHilera(hileraText.getText());
    }//GEN-LAST:event_validarActionPerformed

    private void infoHileraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoHileraActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane,"Ingrese una hilera compuesta por los simbolos de entrada\nque reconoce el automata para que esta sea validada.");
    }//GEN-LAST:event_infoHileraActionPerformed

    /**
     * Reconoce si la hilera ingresada es valida o no basandose en en automata
     * ingresado
     * @param hilera 
     */
    public void reconocerHilera(String hilera){
        int filaEstado = 1;
        String estado=automataMatrizG2[1][0];
        hilera = hilera+"-";
        String transiciones = "";
        
        while(true){
            if(hilera.charAt(0)=='-'){
                break;
            }
            else{
                transiciones = transiciones + hilera.charAt(0) + " " + estado + "->" + automataMatrizG2[filaEstado][buscarColumnaEntrada(String.valueOf(hilera.charAt(0)))]+ "\n";
                estado=automataMatrizG2[filaEstado][buscarColumnaEntrada(String.valueOf(hilera.charAt(0)))];
                hilera = hilera.substring(1);
                filaEstado = buscarFilaEstado(estado);
            }
        }
        
        if(automataMatrizG2[filaEstado][automataMatrizG2[0].length -1].equals("1")){
            transiciones = transiciones + "\nLa hilera ingresada es valida";
        }
        else{
            transiciones = transiciones + "\nLa hilera ingresada no es valida";
        }
        transYvalid.setText("");
        transYvalid.setText(transiciones);
    }
    
    /**
     * Busca la fila correspondiente al estado actual del automata
     * @param simbolo
     * @return 
     */
    private int buscarFilaEstado(String simbolo){
        for (int i = 1; i < automataFliasG2.size(); i++) {
            if(automataMatrizG2[i][0].equals(simbolo)){
                return(i);
            }
        }
        return(1);
    }
    
    /**
     * Busca la columna correspondiente al simbolo de entrada que se esta leyendo
     * @param simbolo
     * @return 
     */
    private int buscarColumnaEntrada(String simbolo){
        for (int i = 1; i < automataMatrizG2[0].length-1; i++) {
            if(automataMatrizG2[0][i].equals(simbolo)){
                return(i);
            }
        }
        return(1);
    }
    
    /*
    public void reconocerHilera(String hilera){
        int punterof=1;
        int punteroc=1;
        String transiciones = "";
        String estado= automataMatrizG2[punterof][0];
        char sEntrada=' ';
        
        for (int i=0 ; i <hilera.length() ; i++){
            sEntrada=hilera.charAt(i);
            
            for (int j=1; j < automataMatrizG2[0].length-1; j++){
                if (Character.toString(sEntrada).equals(automataMatrizG2[0][j])){
                    punteroc=j;
                }
                
            }
            
            for (int k=1; k < automataMatrizG2[0].length-1 ; k++){
                if (estado.equals(automataMatrizG2[k][0])){
                    punterof=k;
                }
            }
            
            transiciones= transiciones + sEntrada +" " + estado + "->" + automataMatrizG2[punterof][punteroc] + "\n";
            estado = automataMatrizG2[punterof][punteroc];
            
            for (int k=1; k < automataMatrizG2[0].length-1 ; k++){
                if (estado.equals(automataMatrizG2[k][0])){
                    punterof=k;
                    System.out.println(punterof);
                }
            }
            
        }
        if(automataMatrizG2[punterof][automataMatrizG2[0].length -1].equals("1")){
            transiciones = transiciones + "\nLa hilera ingresada es valida";
            /**System.out.println(punterof);
            System.out.println(automataMatrizG2[0].length -1);
            System.out.println(automataMatrizG2[2][3]);
        }
        else{
            transiciones = transiciones + "\nLa hilera ingresada no es valida";
        }
        transYvalid.setText("");
        transYvalid.setText(transiciones);
    }**/
    
    public void mostrarAutomata(){
        modelo = (DefaultTableModel)tablaAutomata.getModel();
        modelo.setColumnCount(automataFliasG2.get(0).length -1);
        modelo.setColumnIdentifiers(automataFliasG2.get(0));
        
        for (int i = 1; i <automataFliasG2.size(); i++) {
            modelo.addRow(automataFliasG2.get(i));
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GUI2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField hileraText;
    private javax.swing.JButton infoHilera;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaAutomata;
    private javax.swing.JTextArea transYvalid;
    private javax.swing.JButton validar;
    // End of variables declaration//GEN-END:variables
}
